import numpy as np
import scipy.stats as stats
from scipy import stats
# Задача 1. Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания с надежностью 0.95, если выборочная средняя M = 80, а объем выборки n = 256.

x = 80
sigma = np.sqrt(16)
n = 16
a = 0.05

x1 = x + stats.norm.ppf(a/2) * sigma/np.sqrt(n)
x2 = x - stats.norm.ppf(a/2) * sigma/np.sqrt(n)
print((round(x1, 1), round(x2, 1)))

# Задача 2. В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью, получены опытные данные:
x = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
# Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала, покрывающего это значение с доверительной вероятностью 0,95.

mean = np.mean(x)
sigma = np.std(x, ddof = 1)
n = 10
a = 0.05

x1 = mean + stats.norm.ppf(a/2) * sigma/np.sqrt(n)
x2 = mean - stats.norm.ppf(a/2) * sigma/np.sqrt(n)
print("Истинное значение Х находится в интервале:", (round(x1, 1), round(x2, 1)))


# Задача 3. Рост дочерей:
x = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
# Рост матерей:
y = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
# Используя эти данные построить 95% доверительный интервал для разности среднего роста родителей и детей.

delta = np.mean(x) - np.mean(y)
a = 0.05
d = 1/2 * (np.std(x, ddof=1) + np.std(y, ddof=1))
s = np.sqrt(d/len(x) + d/len(y))

z1 = delta + stats.t.ppf(a/2, df = 2 * (len(x) - 1)) * s
z2 = delta - stats.t.ppf(a/2, df = 2 * (len(x) - 1)) * s
print((round(z1, 1), round(z2, 1)))
# Доверительный интервал от -4,7 до 0,9, то есть средний рост матерей превышает средний рост детей